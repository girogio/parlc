/* This function takes two integers and returns true if
the first argument is greater than the second.
Otherwise if returns false. */
fun XGreaterY(x: int, y: int) -> bool {
    let ans: bool = true;
    if (y > x) { ans = false; }
    return ans;
}

// Same functionality as function above but using less code
fun XGreaterY2(x: int, y: int) -> bool {
    return x > y;
}

// Allocates memory space for 4 variables (x, y, t0, t1).
fun AverageOfTwo(x: int, y: int) -> float {
    let t0: int = x + y;
    let t1: float = t0 / 2 as float; // casting expression to a float
    return t1;
}

/* Same functionality as function above but using less code.
Note the use of the brackets in the expression following
the return statement. Allocates space for 2 variables. */
fun AverageOfTwo2(x: int, y: int) -> float {
    return (x + y) / 2 as float;
}

// Takes two integers and returns the max of the two.
fun Max(x: int, y: int) -> int {
    let m: int = x;
    if (y > m) { m = y; }
    return m;
}

__write 10, 14, #ffff00;
__delay 100;
__clear #00ffaa;
__write_box 10, 14, 2, 2, #0000ff;

fun Race(p1c: colour, p2c: colour, scoremax: int) -> int {
    let p1score: int = 0;
    let p2score: int = 0;
    // while (Max(p1score, p2score) < scoremax) // Alternative loop
    while (p1score < scoremax and p2score < scoremax) {
        let p1toss: int = __randi 1000;
        let p2toss: int = __randi 1000;
        if (p1toss > p2toss) {
            p1score = p1score + 1;
            __write 1, p1score, p1c;
        } else {
            p2score = p2score + 1;
            __write 2, p2score, p2c;
        }
        __delay 100;
    }
    if (p2score > p1score) {
        return 2;
    }
    return 1;
}

// Execution (program entry point) starts at the first statement
// that is not a function declaration. This should go in the .main
// function of ParIR.
let c1: colour = #ff0000; // green
let c2: colour = #0000ff; // blue
let m: int = __height; // the height (y-values) of the pad
let w: int = Race(c1, c2, m); // call function Race
__print w; // prints value of expression to VM logs
